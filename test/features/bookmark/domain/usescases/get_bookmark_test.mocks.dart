// Mocks generated by Mockito 5.3.2 from annotations
// in ny_times_api_test_flutter/test/features/bookmark/domain/usescases/get_bookmark_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:ny_times_api_test_flutter/core/error/failures.dart' as _i5;
import 'package:ny_times_api_test_flutter/features/bookmark/data/models/bookmark_model.dart'
    as _i7;
import 'package:ny_times_api_test_flutter/features/bookmark/domain/entities/bookmark.dart'
    as _i6;
import 'package:ny_times_api_test_flutter/features/bookmark/domain/repository/bookmark_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [BookmarkRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockBookmarkRepository extends _i1.Mock
    implements _i3.BookmarkRepository {
  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Bookmark>>> getBookmarks() =>
      (super.noSuchMethod(
        Invocation.method(
          #getBookmarks,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.Bookmark>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.Bookmark>>(
          this,
          Invocation.method(
            #getBookmarks,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.Bookmark>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.Bookmark>>(
          this,
          Invocation.method(
            #getBookmarks,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Bookmark>>>);
  @override
  _i4.Future<void> saveBookmark({required _i7.BookmarkModel? bookmark}) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveBookmark,
          [],
          {#bookmark: bookmark},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
