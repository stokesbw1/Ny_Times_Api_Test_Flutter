// Mocks generated by Mockito 5.3.2 from annotations
// in ny_times_api_test_flutter/test/features/popular_articles/data/repositories/article_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:fluttertoast/fluttertoast.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:ny_times_api_test_flutter/core/network/network_info.dart'
    as _i6;
import 'package:ny_times_api_test_flutter/core/utils/show_toast.dart' as _i7;
import 'package:ny_times_api_test_flutter/features/popular_articles/data/models/article_model.dart'
    as _i4;
import 'package:ny_times_api_test_flutter/features/popular_articles/domain/repositories/article_local_data_source.dart'
    as _i5;
import 'package:ny_times_api_test_flutter/features/popular_articles/domain/repositories/article_remode_data_source.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ArticleRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockArticleRemoteDataSource extends _i1.Mock
    implements _i2.ArticleRemoteDataSource {
  @override
  _i3.Future<List<_i4.ArticleModel>> getArticles() => (super.noSuchMethod(
        Invocation.method(
          #getArticles,
          [],
        ),
        returnValue:
            _i3.Future<List<_i4.ArticleModel>>.value(<_i4.ArticleModel>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i4.ArticleModel>>.value(<_i4.ArticleModel>[]),
      ) as _i3.Future<List<_i4.ArticleModel>>);
}

/// A class which mocks [ArticleLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockArticleLocalDataSource extends _i1.Mock
    implements _i5.ArticleLocalDataSource {
  @override
  _i3.Future<void> cacheArticles({required List<_i4.ArticleModel>? articles}) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheArticles,
          [],
          {#articles: articles},
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<List<_i4.ArticleModel>> getLastCachedArticles() =>
      (super.noSuchMethod(
        Invocation.method(
          #getLastCachedArticles,
          [],
        ),
        returnValue:
            _i3.Future<List<_i4.ArticleModel>>.value(<_i4.ArticleModel>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i4.ArticleModel>>.value(<_i4.ArticleModel>[]),
      ) as _i3.Future<List<_i4.ArticleModel>>);
}

/// A class which mocks [NetworkInfoImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfoImpl extends _i1.Mock implements _i6.NetworkInfoImpl {
  @override
  _i3.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
}

/// A class which mocks [ShowToast].
///
/// See the documentation for Mockito's code generation for more information.
class MockShowToast extends _i1.Mock implements _i7.ShowToast {
  @override
  void showToast({
    _i8.Toast? length = _i8.Toast.LENGTH_SHORT,
    _i8.ToastGravity? gravity = _i8.ToastGravity.BOTTOM,
    required String? message,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #showToast,
          [],
          {
            #length: length,
            #gravity: gravity,
            #message: message,
          },
        ),
        returnValueForMissingStub: null,
      );
}
